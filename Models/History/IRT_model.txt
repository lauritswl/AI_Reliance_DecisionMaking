# JAGS code for First Stage of Advice Taking Model

# Data
#    NO          Number of instances in advice off condition
#    NS          Number of participants    
#    NI          Number of images
#    L           Number of labels           
#    jid(o)      Item index for observation o
#    iid(o)      Participant index for observation o
#    z(o)        True label for obervervation o
#    lbl(o)      Label in the no-advice condition (Human Prediction)
#    r(o)        Confidence rating for observation o in advice off condition (numeric factor)

# Key Latent Parameters
#    a[i]        ability participant i 
#    s[j]        discrimination parameter item j
#    d[j]        difficulty item j
#    v[i,1:2]    cutpoints participant i
#    theta[ o ]    prop correct for observation o

model{
  # Loop over observations in advice off condition
  for (o in 1:NO) { 
     # Compute probability correct label will be used for participant iid[o] and item jid[o]            
     logoddstheta[ o ] <- s[jid[o]] * a[iid[o]] - d[jid[o]]
     theta[ o ] <- 1 / ( 1 + exp( -logoddstheta[o] ))
     theta_noise[ o ] ~ dnorm(theta[o], sigma[iid[o]]) # Latent variable for ordinal probit
     # Generate confidence 
     # First attempt:
     # r[o] ~ dordered.logit(theta[o] , v[iid[o],1:2])
     # Second Attempt
     # r[o] ~ dinterval(theta_noise[o], v[iid[o],1:2])
     # Third Attempt
     # r[o] <- ifelse(theta_noise <= v[iid[o],1], 1, ifelse(theta_noise <= v[iid[o],2], 2, 3))
     # Saving anything in r
     r[o] ~ dpois(theta_noise[o])T(,3)


     # Create a matrix ps[o,j] where ps[o,j] is the probability of correctly labeling if the true label for observation o is j
     for (j in 1:L) {
         ps0[o,j] <- ifelse( z[o]==j , theta[o], (1-theta[o]) / (L-1))
     }

     # Sample a label
     lbl[o] ~ dcat( ps0[o,1:L] )	
  }


  # Priors for item difficulty and discrimination
  for (j in 1:NI) {
     d[j] ~ dunif( -10 , 10 )
     s[j] ~ dnorm( 1,1 )I(0,)
  }
  # Prioirs for 
  for (i in 1:NS) { 
     # Prioirs for ability
     a[i] ~ dnorm( 0, 1 )
     
     # Uniform prior over cutpoints for the ordered probit model
     vu[i,1] ~ dunif( 0,1 )
     vu[i,2] ~ dunif( 0,1 )
     v[i,1:2] <- sort( vu[i,1:2] )

     tau[i] ~ dunif( 0.1 , 15 )
     sigma[i] <- 1/tau[i]
  } 
}